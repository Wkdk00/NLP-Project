from pyannote.audio import Pipeline

"""–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏"""

def load_diarization_model(hf_token):
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...")
    try:
        pipeline = Pipeline.from_pretrained(
            "pyannote/speaker-diarization-3.1",
            use_auth_token=hf_token
        )
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        pipeline.instantiate({
            "clustering": {
                "method": "average",  # –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
                "threshold": 0.7,     # –ü–æ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞
                "min_cluster_size": 3 # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–ø–∏–∫–µ—Ä–∞
            },
            "segmentation": {
                "min_duration_off": 0.5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–µ–ø–ª–∏–∫–∞–º–∏
            }
        })
        return pipeline
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return None

"""–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
def find_speaker(diarization, start_time, end_time):
    for turn, _, speaker in diarization.itertracks(yield_label=True):
        if turn.start <= start_time <= turn.end or turn.start <= end_time <= turn.end:
            return speaker
    return "UNKNOWN"